var marker;
var infowindow;

function myMap() {

    var latR = parseFloat("34.75794");
    var lngR = parseFloat("10.73401");
    var restaurantLatLng = new google.maps.LatLng(latR, lngR);
    var mapCanvas = document.getElementById("map");
    var myCenter = new google.maps.LatLng(latR, lngR);

    infowindowR = new google.maps.InfoWindow({
        content: 'Restaurant ',
    });
    var mapOptions = {
        center: myCenter, zoom: 15,
        mapTypeId: google.maps.MapTypeId.HYBRID
    };
    var geocoder = new google.maps.Geocoder();
    var directionsDisplay = new google.maps.DirectionsRenderer();
    var map = new google.maps.Map(mapCanvas, mapOptions);

    directionsDisplay.setMap(map);
    // Remove default markersd {A : B}
    directionsDisplay.setOptions({ suppressMarkers: true });

    var iconR = "restaurant_pinlet-2-white.png";
    var markerR = new google.maps.Marker({
        title: "Position du Restaurant",
        position: new google.maps.LatLng(latR, lngR),
        animation: google.maps.Animation.DROP,
        icon: new google.maps.MarkerImage(iconR)
    });
    markerR.setMap(map);
    infowindowR.open(map, markerR);

    google.maps.event.addListener(map, 'click', function (event) {
        placeMarker(map, event.latLng, distance(resto, event.latLng));
        placeRouteDirection(directionsDisplay, restaurantLatLng, event.latLng);
        placeInfoWindow(infowindow, map, marker, event.latLng);
    });
}

/**
 * 
 * @param {*} map 
 * @param {*} location 
 * @param {*} distance 
 */
function placeMarker(map, location, distance) {

    var geocoder = new google.maps.Geocoder();

    if (!marker || !marker.setPosition) {
        marker = new google.maps.Marker({
            position: location,
            map: map,

            icon: 'pin.png'
        });
    } else {
        marker.setPosition(location);
    }
}

/**
 * 
 * @param {*} directionsDisplay 
 * @param {*} restaurantLatLng 
 * @param {*} customerLatLng 
 */
function placeRouteDirection(directionsDisplay, restaurantLatLng, customerLatLng) {
    var directionsService = new google.maps.DirectionsService();
    var start = new google.maps.LatLng(restaurantLatLng.lat(), restaurantLatLng.lng());
    var end = new google.maps.LatLng(customerLatLng.lat(), customerLatLng.lng());

    var request = {
        origin: start,
        destination: end,
        travelMode: google.maps.TravelMode.DRIVING
    };
    directionsService.route(request, function (response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
            directionsDisplay.setDirections(response);
            directionsDisplay.setMap(map);

            /**
             * change them with ur own inputs;
             */
            var myroute = response.routes[0];
            document.getElementById("distance").innerHTML = "Distance : "+ myroute.legs[0].distance.value/1000 + "KM";
            document.getElementById("time").innerHTML = "Time : "+ Math.round((myroute.legs[0].duration.value / 60).toFixed(2) * 2) / 2 + "MIN";
            document.getElementById("speed").innerHTML = "Fee : "+ DeliveryFee(myroute.legs[0].distance.value/1000) + "DT";

        } else {
            console.log("Directions Request from " + start.toUrlValue(6) + " to " + end.toUrlValue(6) + " failed: " + status);
        }
    });
}

/**
 * 
 * @param {*} restaurantLatLng 
 * @param {*} customerLatLng 
 */
function distance(restaurantLatLng, customerLatLng) {
    var startPoint = new google.maps.LatLng(restaurantLatLng.lat(), restaurantLatLng.lng());
    var endPoint = new google.maps.LatLng(customerLatLng.lat(), customerLatLng.lng());

    distanceBetween = google.maps.geometry.spherical.computeDistanceBetween(startPoint, endPoint);
    if (distanceBetween < 1000) distanceBetween = Math.round(distanceBetween);
    return Math.round(distanceBetween) / 1000;
}

/**
 * 
 * @param {*} distance 
 * @param {float} deliveryFeeInit 
 * @param {float} distanceInit 
 * @param {float} deliveryFeeUp 
 * @param {float} deliveryMaxFee 
 */
function deliveryFee(distance, deliveryFeeInit, distanceInit, deliveryFeeUp, deliveryMaxFee) {
    //deliveryFeeInit = 3.000
    if (distance > distanceInit) { // distanceInit = 4.000 [4KM]
        var distanceUp = distance - distanceInit;
        var quotient = Math.floor(distanceUp / 1.0) + 1;
        // var remainder = mDis % 0.5;
        // var deliveryFeeUp = 0.500;
        var deliveryFee = deliveryFeeInit + quotient * deliveryFeeUp;
    }
    if (deliveryFee < deliveryFeeInit) {
        deliveryFee = deliveryFeeInit;
    }
    else if (deliveryFee > deliveryMaxFee) {
        // launch Popover >[Votre adresse est en dehors de notre zone de livraison];
        console.log(false);
        return false;
    }
    return deliveryFee.toFixed(3);

}

/**
 * 
 * @param {*} infowindow 
 * @param {*} map 
 * @param {*} marker 
 * @param {*} location 
 */
function placeInfoWindow(infowindow, map, marker, location) {

    var geocoder = new google.maps.Geocoder();
    var latlng = { lat: parseFloat(location.lat()), lng: parseFloat(location.lng()) };
    geocoder.geocode({ 'location': latlng, 'language': 'fr-fr' }, function (results, status) {

        if (status == google.maps.GeocoderStatus.OK) {
            if (results[0]) {
                if (results[0].formatted_address.includes("Unnamed Road")) {
                    alert('err 1');
                    locationName = results[1].formatted_address;
                    if (locationName.includes("Unnamed Road")) { locationName = results[2].formatted_address; alert('err 1.1'); }
                } else {
                    locationName = results[0].formatted_address;
                    if (locationName.includes("Unnamed Road")) { locationName = results[2].formatted_address; alert('err 2'); }
                }
                infowindow.setContent(locationName);
                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.open(map, marker);
                });
            } else {
                console.log('No results found');
                return false;
            }
        } else {
            console.log('Geocoder failed due to: ' + status);
            return false;
        }

    });
    if (!!infowindow && !!infowindow.close) {
        infowindow.close();
    }

    infowindow.open(map, marker);
}